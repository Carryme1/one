#! /bin/bash
# Submit multiple ONE simulation jobs to the OAR batch scheduler

# Default parameters
mail="san@npa.lip6.fr"
end_time=7200
nrof_sim=20
tick=0.1
speed=1.5
walk_prob=0.7
walk_time=14500
selfwarned_prob=0.000001
prewarned_prob=0.8
percentage_to_save=0.9
random_poi=0.1

router="EpidemicDeliverableRouter"
accident_delay=0
accident_prob=1.0
nrof_accidents=10
buffer_size=5M
message_size=1
reemit_interval=300
report_interval=1000
map_file=data/usantiago2.wkt
poi_file=data/usantiago2_pois.wkt
map_x=1478
map_y=2350
random_seed=$RANDOM

# Usage
usage="
Usage: $0 one-directory hosts [options]\n
one-directory: path to the ONE simulator's directory\n
hosts: number of hosts for the simulation\n
Submit multiple ONE's simulation jobs to the OAR batch scheduler\n
Options:\n

 -m, --mail <mail>\t\tMail address for OAR's notification\n
 \t\t\t\t(default is $mail)\n

 -e, --end-time <delay>\t\tSpecify simulation end time (in seconds)\n
 \t\t\t\t(default is $end_time)\n

 -n, --nrof-sim <number>\tNumber of simulation to launch (default is $nrof_sim)\n

 -t, --tick <delay>\t\tUpdate interval of the simulator (in seconds)\n
 \t\t\t\t(default use \$RANDOM)\n

 -s, --speed <speed>\t\tSpeed of hosts\n
 \t\t\t\t(default is $speed)\n

 -wp, --walk-prob <prob>\tProbability of walking hosts\n
 \t\t\t\t(default is $walk_prob)\n

 -wt, --walk-time <delay>\tMinimum walking time (in seconds)\n
 \t\t\t\t(default is $walk_time)\n

 -sp, --selfwarned-prob <prob>\tProbability of selfwarned hosts\n
 \t\t\t\t(default is $selfwarned_prob)\n

 -pp, --prewarned-prob <prob>\tProbability of prewarned hosts\n
 \t\t\t\t(default is $prewarned_prob)\n

 -ps, --percentage-to-save <%>\tPercentage of hosts to save\n
 \t\t\t\t(default is $percentage_to_save)\n

 -rp, --random-poi <percentage>\tProbability to choose a POI randomly\n
 \t\t\t\t(default is $random_poi)\n


 -r, --router <name>\t\tRouter class used for hosts\n
 \t\t\t\t(default is $router)\n

 -ad, --accident-delay <number>\tDelay before first accident\n
 \t\t\t\t(default is $accident_delay)\n

 -ap, --accident-prob <number>\tProbability of accident per step of the simulation\n
 \t\t\t\t(default is $accident_prob)\n

 -na, --nrof-accidents <number>\tNumber of accidents in the simulation\n
 \t\t\t\t(default is $nrof_accidents)\n

 -rs, --random-seed <number>\tSeed for movement and application pseudo random\n
 \t\t\t\tnumber generator\n
 \t\t\t\t(default is $tick)\n

 -bs, --buffer-size <size>\tSize of host's buffer (in bytes)\n
 \t\t\t\t(default is $buffer_size)\n

 -ms, --message-size <size>\tSize of message generated by applications\n
 \t\t\t\t(in bytes, default is $message_size)\n

 -mi, --reemit-interval <delay>\tInterval between message reemission (to the same host)\n
 \t\t\t\t(in seconds, default is $reemit_interval)\n

 -ri, --report-interval <delay>\tReport update interval (in seconds)\n
 \t\t\t\t(default is $report_interval)\n

 -mf, --map-file <file>\t\tWKT map used for simulation\n
 \t\t\t\tPath must be relative of the ONE simulator\n
 \t\t\t\tdirectory (default is $map_file)\n

 -pf, --poi-file <file>\t\tWKT POI data used for simulation\n
 \t\t\t\tPath must be relative of the ONE simulator\n
 \t\t\t\tdirectory (default is $poi_file)\n

 -mx, --map-width <size>\tMap width (default is $map_x)\n

 -my, --map-height <size>\tMap height (default is $map_y)\n

"
# Check number of parameters
[[ $# -lt 2 ]] && echo -e $usage >&2 && exit 1

# Process parameters
one_directory=$1
nrof_hosts=$2
shift 2
while [[ "$1" != "" ]] ; do
    case $1 in
        -m|--mail)                  mail=$2;                shift 2;;
        -e|--end-time)              end_time=$2;            shift 2;;
        -n|--nrof-sim)              nrof_sim=$2;            shift 2;;
        -t|--tick)                  tick=$2;                shift 2;;
        -s|--speed)                 speed=$2;               shift 2;;
        -wp|--walk-prob)            walk_prob=$2;           shift 2;;
        -wt|--walk-time)            walk_time=$2;           shift 2;;
        -sp|--selfwarned-prob)      selfwarned_prob=$2;     shift 2;;
        -pp|--prewarned-prob)       prewarned_prob=$2;      shift 2;;
        -ps|--percentage-to-save)   percentage_to_save=$2;  shift 2;;
        -rp|--random-poi)           random_poi=$2;          shift 2;;
        -r|--router)                router=$2;              shift 2;;
        -ad|--accident-delay)       accident_delay=$2;      shift 2;;
        -ap|--accident-prob)        accident_prob=$2;       shift 2;;
        -na|--nrof-accidents)       nrof_accidents=$2;      shift 2;;
        -rs|--random-seed)          random_seed=$2;         shift 2;;
        -bs|--buffer-size)          buffer_size=$2;         shift 2;;
        -ms|--message-size)         message_size=$2;        shift 2;;
        -mi|--reemit-interval)      reemit_interval=$2;     shift 2;;
        -ri|--report-interval)      report_interval=$2;     shift 2;;
        -mf|--map-file)             map_file=$2;            shift 2;;
        -pf|--poi-file)             poi_file=$2;            shift 2;;
        -mx|--map-width)            map_x=$2;               shift 2;;
        -my|--map-height)           map_y=$2;               shift 2;;
        *) break;;
    esac
done

# Keep the absolute path to the script directory in memory
script_directory=`dirname "$0"`
cd $script_directory
script_directory=$PWD

# Keep the absolute path to the ONE simulator in memory
cd $one_directory
one_directory=$PWD

result_dir="results"
# Keep the absolute path to the results directory in memory
mkdir -p $one_directory/$result_dir
cd $one_directory/$result_dir
result_dir=$PWD

cd $script_directory
date=`date +"%Y%m%dT%H%M%S"`
scenario_name_prefix="$date"_${nrof_hosts}

echo "Number of simulations : ${nrof_sim}"
echo "Number of nodes : ${nrof_hosts}"
echo "Scenario name : ${scenario_name_prefix}_*"
mail_opt=""
for i in `seq $nrof_sim`; do
    [[ $i -lt 10 ]] && i=0$i
    # Generate scenario's name
    scenario_name=${scenario_name_prefix}_$i
    # Build directory associated with scenario
    simulation_directory=$result_dir/$scenario_name
    mkdir -p $simulation_directory
    # Settings file
    settings=$simulation_directory/$scenario_name.txt

    # Generate settings file
    cat > $settings <<EOF
#
# Settings for DangerMovement
#

Scenario.name = ${scenario_name}
Scenario.endTime = ${end_time}
Scenario.updateInterval = ${tick}
Scenario.nrofHostGroups = 2
# If nrofHostsGroups is set to 1, the map will not be
# displayed because no group of nodes will use a
# mobility model based on MapBasedMovement

## Group and movement model specific settings
# Common settings for all groups     
Group.nrofHosts = 0

# Applications
dangerApp.type = DangerApplication
# Message sending interval between two connected hosts
dangerApp.interval = ${reemit_interval}
# Message size (bytes)
dangerApp.size = ${message_size}

# group1 (pedestrians) specific settings
Group1.nrofHosts = ${nrof_hosts}
Group1.bufferSize = ${buffer_size}
Group1.movementModel = DangerMovement
Group1.interface1 = btInterface
Group1.nrofInterfaces = 1
# Walking speeds
Group.speed = ${speed}, ${speed}
# Probability for the node to walk at the beginning
Group1.walkProb = ${walk_prob}
# Minimum time the walking node will walk
Group1.walkTime = ${walk_time}
# Probability for the node to be selfwarned
Group1.selfwarnedProb = ${selfwarned_prob}
# Probability to be prewarned
Group1.prewarnedProb = ${prewarned_prob}
# Percentage of nodes at evacuation center 
# required to end the simulation
Group1.percentageToSave = ${percentage_to_save}
# Probability to choose an evacuation center randomly
Group1.randomPoi = ${random_poi}
# Message router
Group1.router = ${router}
# Nombre d'applications
Group1.nrofApplications = 1
Group1.application1 = dangerApp

## Message creation parameters
# How many event generators
Events.nrof = 1

# Road accident generator
Events1.class = AccidentGenerator
# Time to wait before the first accident
Events1.delay = ${accident_delay}
# Probability of accident per step of sim
Events1.accidentProb = ${accident_prob}
# Number of accidents to generate
Events1.nrofAccidents = ${nrof_accidents}
# Seed for accident generator's pseudo random number generator 
# (default = 0)
Events1.seed = ${random_seed}


## Movement model settings
# seed for movement models' pseudo random number generator 
# (default = 0)
MovementModel.rngSeed = ${random_seed}
# World's size for Movement Models
MovementModel.worldSize = ${map_x}, ${map_y}
# How long time to move hosts in the world before real simulation
MovementModel.warmup = 0


## Map based movement -movement model specific settings
MapBasedMovement.nrofMapFiles = 1
MapBasedMovement.mapFile1 = ${map_file}


## Points of Interest for the evacuation centers
PointsOfInterestEvac.poiFile = ${poi_file}


## Reports - all report names have to be valid report classes

# how many reports to load
Report.nrofReports = 2
# length of the warm up period (simulated seconds)
Report.warmup = 0
# default directory of reports (can be overridden per Report with output setting)
Report.reportDir = reports/
# ReportDB update rate (steps)
Report.updateRate = ${report_interval}
# Report location
Report.report1 = LocationReportCSV
# Report Time
Report.report2 = TimeReportDB
EOF
    # Mail notification for the last job
    [ $i -eq $nrof_sim ] && mail_opt="--notify mail:$mail"

    job_name="ONE $scenario_name"
    # Submit job to OAR scheduler
    oarsub -l "core=1,walltime=72:0:0" -name="${job_name}" --stdout="${simulation_directory}/log_%jobid%.out" --stderr="${simulation_directory}/log_%jobid%.err" $mail_opt "./task.sh $one_directory $settings $result_dir" &
    # For sequential run, comment previous line and
    # uncomment next
    # ./task.sh $one_directory $settings $result_dir
done

echo "${nrof_sim} jobs submitted."